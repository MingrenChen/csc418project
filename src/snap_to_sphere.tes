// Hint: Crib from your model_view_projection.vs
// Layout:
//                                         Indicate that we're dealing with
//                                         triangles in CCW order and using a
//                                         sane spacing.
layout(triangles, equal_spacing, ccw) in;
// Uniforms
uniform mat4 view;
uniform mat4 proj;
uniform float animation_seconds;
uniform bool is_mars;
uniform bool is_venus;
uniform bool is_earth;
uniform bool is_mercury;


// Inputs:
//                    array of 3 3D patch corner positions
in vec4 pos_es_in[];
// Outputs:
//                   projected, view, and model transformed 3D position
out vec4 pos_fs_in;
//                        view and model transformed 3D position
out vec4 view_pos_fs_in;
//                      view and model transformed 3D normal
out vec3 normal_fs_in;
//                      3D position _before_ applying model, view or projection
//                      transformations (e.g., point on unit sphere)
out vec3 sphere_fs_in;
// expects: interpolat, model,
void main()
{
  /////////////////////////////////////////////////////////////////////////////
  vec4 pos_in = interpolate(gl_TessCoord, pos_es_in[0], pos_es_in[1], pos_es_in[2]);
  sphere_fs_in = normalize(pos_in.xyz);

  vec3 t = vec3(0, 0, 0);
  if (is_mercury) {
    t = vec3(2 / 0.3, 0, 0);
  }
  if (is_venus) {
    t = vec3(3 / 0.3, -3 / 0.4, - 1 / 0.3);
  }
  if (is_earth) {
    t = vec3((abs(mod(cos(animation_seconds), 10.0) - 5) * 0.8 + 1) / 0.3, 0, 0);
    t = vec3(2 / 0.5, 0, 0);
  }
  if (is_mars) {
    t = vec3(3 / 0.7, -3 / 0.5, 1 / 0.3);
  }
  mat4 vm = view * model(is_mercury, is_venus, is_earth,is_mars, animation_seconds);
  mat4 shift = translate(t);
  view_pos_fs_in = vm * (vec4(sphere_fs_in, 1.0) * shift);
  normal_fs_in = normalize((inverse(shift) * inverse(transpose(vm)) * vec4(sphere_fs_in, 1.0)).xyz);
  pos_fs_in = proj * view_pos_fs_in;
  gl_Position = pos_fs_in;
  /////////////////////////////////////////////////////////////////////////////
}
